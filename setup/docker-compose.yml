---
# ansible managed
version: '3.7'
x-blocks:
  env: &env
    env_file: [.env]
  restart: &restart
    restart: "$BITWARDEN_RESTART_POLICY"
networks:
  app_net:
    driver: bridge
    ipam: {driver: default, config: [{subnet: "${BITWARDEN_NETWORK}.0/24"}]}
services:
  lb:
    depends_on: [web, db, mailcatcher]
    <<: [ *env, *restart ]
    image: corpusops/nginx:1.19-alpine
    networks: {app_net: {ipv4_address: "${BITWARDEN_NETWORK}.2"}}
    entrypoint:
    - /bin/sh
    - "-exc"
    - |-
      d=/nginx/deny.conf
      touch $$d $$d.prev
      sed -i -re "s/user nginx/user root/g" /etc/nginx/nginx.conf
      frep /nginx/vhost.conf.frep:/etc/nginx/conf.d/default.conf --overwrite
      frep /nginx/adminallow.conf.jfrep:/nginx/adminallow.conf    --overwrite
      touch /etc/htpasswd/protect
      chmod 644 /etc/htpasswd/protect
      for i in $$(find /etc/htpasswd -type f -maxdepth 1);do ln -sfv $$i /etc/htpasswd-$$(basename $$i);done
      if [ "x$$ADMIN_TOKEN" != "x" ];then
        echo "/ htpasswd:">&2
        echo "$$ADMIN_TOKEN" | htpasswd -bim /etc/htpasswd/protect admin
      fi
      cp $$d $$d.prev
      ( while true;do set +x;
          if ! ( diff $$d.prev $$d );then
            echo "New Banned ip, reloading"
            cp -vf $$d $$d.prev
            if [ -f /var/run/nginx.pid ];then
              kill -HUP `cat /var/run/nginx.pid` || /bin/true
            fi
          fi
          sleep $${F2B_TIMER}
        done; )&
      exec supervisord.sh
    environment: {SUPERVISORD_CONFIGS: "cron rsyslog nginx", F2B_TIMER: "30"}
    volumes: ["htpasswd:/etc/htpasswd", "nginx:/var/log/nginx", "nginx:/logs", "nginx:/certs", "./nginx:/nginx"]
    ports:
    - "${BITWARDEN_LISTEN_IF}:${BITWARDEN_PUBLIC_HTTP_PORT}:80"
    - "${BITWARDEN_LISTEN_IF}:${BITWARDEN_PUBLIC_HTTPS_PORT}:80"
  db: &db
    <<: [ *env, *restart ]
    networks: {app_net: {ipv4_address: "${BITWARDEN_NETWORK}.3"}}
    image: "$BITWARDEN_DB_IMAGE"
    security_opt: ["seccomp=unconfined"]
    volumes:
    - "db:/var/lib/postgresql/data"
    - "db:/var/lib/mysql"
  web:
    depends_on: [db, setup]
    <<: [ *env, *restart ]
    networks: {app_net: {ipv4_address: "${BITWARDEN_NETWORK}.4"}}
    image: "$BITWARDEN_IMAGE"
    ports: ["${BITWARDEN_LISTEN_INT_IF}:${BITWARDEN_HTTP_PORT}:80"]
    entrypoint:
    - bash
    - "-exc"
    - |-
      while !(curl -s setup);do echo "not ready">&2;sleep 0.5;done
      exec /start.sh "$$@"
    volumes: &webvol
    - "bitwarden:/data"
    - "./bitwarden:/conf"
    - helpers:/helpers
    - logs:/logs
  setup:
    <<: [ *db ]
    depends_on: [db]
    networks: {app_net: {ipv4_address: "${BITWARDEN_NETWORK}.6"}}
    volumes: [helpers:/helpers]
    entrypoint:
    - bash
    - "-ec"
    - |-
      f=/started_$$(echo $$POSTGRES_DB|sed -re "s![/:]!__!g")
      hf=/started_hr
      POSTGRES_STARTUP_TIMEOUT=$${POSTGRES_STARTUP_TIMEOUT:-45s}
      HELPERS_TIMEOUT=$${HELPERS_TIMEOUT:-45s}
      u="postgres://$$POSTGRES_USER:$$POSTGRES_PASSWORD@$$POSTGRES_HOST:$$POSTGRES_PORT/$$POSTGRES_DB"
      rf() { for fl in $$f $$hf;do if [ -f $$fl ] ;then rm -f $$fl;fi;done; }
      export PATH=/cops_helpers:/$$PATH
      rf
      echo "Try connection to pgsql: $$POSTGRES_DB & wait for db init" >&2
      ( while true;do if ( echo select 1|psql -v ON_ERROR_STOP=1 $$u; );then touch $$f&&break;fi;done )&
      echo "Try helpers availability" >&2
      ( set +ex;while true;do frep --version && touch $$hf&&break;sleep 1;echo retryh;done; )&
      set -x
      dockerize -timeout 300s -wait "file:///$$f"
      dockerize -timeout 900s -wait "file:///$$hf"
      set +x
      rf
      while true;do printf "HTTP/1.1 200 OK\nContent-Length: 7\n\nstarted\n"|( nc -l -p 80 || /bin/true);done
  backup:
    depends_on: [db]
    <<: [ *env, *restart ]
    image: "$BITWARDEN_BACKUP_IMAGE"
    networks: {app_net: {ipv4_address: "${BITWARDEN_NETWORK}.5"}}
    volumes: ["dbs:/var/db_smart_backup"]
    environment:
      DBNAMES: "$BITWARDEN_DB_NAME"
      COMP: "$BITWARDEN_DBS_COMPRESSION"
      KEEP_LASTS: "$BITWARDEN_KEEP_DUMPS"
      KEEP_DAYS: "$BITWARDEN_KEEP_DUMPS"
      KEEP_MONTHES: "0"
      KEEP_WEEKS: "0"
  logrotate:
    depends_on: [web]
    networks: {app_net: {ipv4_address: "${BITWARDEN_NETWORK}.9"}}
    image: corpusops/debian-bare
    volumes:
    - ./fail2ban:/f2b
    - ./logrotate.d/:/c
    - logs:/logs
    <<: [ *env, *restart ]
    entrypoint:
    - bash
    - "-exc"
    - |-
      export SUPERVISORD_CONFIGS=cron
      for i in /c/*frep;do
      frep $$i:/etc/logrotate.d/$$(basename $$i .frep) --overwrite
      done
      exec supervisord.sh
  fail2ban:
    <<: [ *env, *restart ]
    image: crazymax/fail2ban:latest
    environment:
      TZ: Europe/Paris
      F2B_DB_PURGE_AGE: 30d
      F2B_LOG_TARGET: /data/fail2ban.log
      F2B_LOG_LEVEL: "${F2B_LOGLEVEL:-INFO}"
    volumes:
    - ./fail2ban:/data
    - ./nginx:/nginx
    - logs:/logs:ro
  mailcatcher:
    <<: [ *env ]
    networks: {app_net: {ipv4_address: "${BITWARDEN_NETWORK}.12"}}
    image: corpusops/mailhog
    hostname: mailcatcher
    volumes: ["mails:/mails"]
    environment:
      MH_STORAGE: maildir
      MH_MAILDIR_PATH: /mails
      MH_SMTP_BIND_ADDR: "0.0.0.0:${MAILCATCHER_SMTP_PORT:-1025}"
      MH_API_BIND_ADDR: "0.0.0.0:${MAILCATCHER_PORT:-8025}"
      MH_UI_BIND_ADDR: "0.0.0.0:${MAILCATCHER_PORT:-8025}"
      MH_UI_WEB_PATH: /mailcatcher
      MH_AUTH_FILE: /home/mailhog/pw
      MAILCATCHER_PASSWORD: "${MAILCATCHER_PASSWORD:-mailcatcher}"
      MAILCATCHER_USER: "${MAILCATCHER_USER:-mailcatcher}"
    user: root
    entrypoint:
      - sh
      - '-c'
      - >
        chown mailhog /mails
        && pw=$$(MH_AUTH_FILE="" MailHog bcrypt "$${MAILCATCHER_PASSWORD:-mailcatcher}")
        && echo "$${MAILCATCHER_USER:-mailcatcher}:$$pw" > $$MH_AUTH_FILE
        && su mailhog -p -c MailHog
volumes:
  nginx:
  db:
  dbs:
  bitwarden:
  helpers:
  logs:
  mails:
  htpasswd:
# vim: set ft=sls :
